import math
import json
import os
import pickle
import numpy as np
from extract import PEFeatureExtractor
from make_array import load_surf_info
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from scipy.stats import spearmanr
from scipy.cluster import hierarchy
from collections import defaultdict
from sklearn.metrics import confusion_matrix
from importance import permutation_importance, low_fp_accuracy
import matplotlib.pyplot as plt

ext = PEFeatureExtractor()

if os.path.isfile('./all.npy'):
    X = np.load('all.npy')
else:
    if os.path.isfile('./surf.npy'):
        surf = np.load('surf.npy')
    else:
        surf = load_surf_info('surf', 'ffridataset2020_malware.jsonl', 'ffridataset2020_cleanware.jsonl')

    if os.path.isfile('./trid.npy'):
        trid = np.load('trid.npy')
    X = np.hstack([surf, trid])
    np.save('all', X)

Y = np.hstack([np.ones(75000), np.zeros(75000)])
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, stratify=Y, random_state=0)

parameters = {
    'n_estimators' :[700, 800],
    'max_depth' :[200, 300],
    'min_samples_leaf': [1],
    'min_samples_split': [2]
}

clf = GridSearchCV(estimator=RandomForestClassifier(), param_grid=parameters, cv=5, iid=False)
clf.fit(X_train, Y_train)

print("Best parameters set found on development set: %s" % clf.best_params_)

best = clf.best_estimator_

Y_pred = best.predict(X_test)
print(confusion_matrix(Y_test, Y_pred))
prob = best.predict_proba(X_test)[:, 1]
Y_pred = (prob > 0.6).astype(int)
print(confusion_matrix(Y_test, Y_pred))
Y_pred = (prob > 0.7).astype(int)
print(confusion_matrix(Y_test, Y_pred))
Y_pred = (prob > 0.8).astype(int)
print(confusion_matrix(Y_test, Y_pred))
Y_pred = (prob > 0.9).astype(int)
print(confusion_matrix(Y_test, Y_pred))
print(low_fp_accuracy(Y_test, prob, fp_rate=0.01))
print(low_fp_accuracy(Y_test, prob))
