import json
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from keras.models import Sequential
from keras.layers import Dense
from keras.layers.recurrent import LSTM
from keras.optimizers import Adam
from keras.callbacks import EarlyStopping
from sklearn.metrics import confusion_matrix

def load_hash_info(*args):
    max_length = 0
    h_array = np.empty((0, 0))
    l_array = np.empty(0)
    count = 0

    for fname, element in args:
	j = 1

	with open(fname) as f:
	    for line in f:
		if j > 1000:
		    break
		data = json.loads(line)
		len_hash = len(data['hashes']['ssdeep'])
		hash_list = np.array([ord(c) - ord(' ') for c in data['hashes']['ssdeep']])
		if len_hash > max_length:
		    h_array = np.hstack([h_array, np.zeros((count, len_hash - max_length))])
		    max_length = len_hash
		elif len_hash < max_length:
		    hash_list = np.hstack([hash_list, np.zeros(max_length - len_hash)])
		h_array = np.vstack([h_array, hash_list])
		j += 1
		count += 1
		print(count)

	l_array = np.hstack([l_array, np.full(1000, element)])

    return h_array.reshape(count, max_length, 1), l_array, max_length

X, Y, ml = load_hash_info(('ffridataset2020_malware.jsonl', 1), ('ffridataset2020_cleanware.jsonl', 0))

print(X)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, stratify=Y, random_state=0)


model = Sequential()

model.add(LSTM(
    128,
    input_shape=(ml, 1),
    return_sequences=False)
)

model.add(Dense(1, activation="sigmoid"))

model.compile(loss="mean_squared_error", metrics=['accuracy'], optimizer=Adam(lr=0.01))
model.summary()

early_stopping = EarlyStopping(monitor='val_loss', mode='auto', patience=20)

model.fit(
    X_train, Y_train,
    batch_size=300,
    epochs=100,
    validation_split=0.1,
    callbacks=[early_stopping]
)

Y_pred = model.predict(X_test).ravel()>0.5
print(confusion_matrix(Y_test, Y_pred))
