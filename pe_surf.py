import json
import os
import numpy as np
from extract import PEFeatureExtractor
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix

def load_surf_info(*args):
    extractor = PEFeatureExtractor()
    f_array = np.empty((0, extractor.dim))
    l_array = np.empty(0)
    count = 0
    print(extractor.dim)
    for fname, element in args:
        j = 1

        with open(fname) as f:
            for line in f:
                if j > 100000:
                    break
                data = json.loads(line)
                feature_vector = extractor.process_raw_features(data)
                f_array = np.vstack([f_array, feature_vector])
                j += 1
                count += 1

        l_array = np.hstack([l_array, np.full(75000, element)])

    return f_array, l_array

if os.path.isfile('./surf2.npy'):
    X = np.load('surf2.npy')
    Y = np.hstack([np.ones(75000), np.zeros(75000)])
else:
    X, Y = load_surf_info(('ffridataset2020_malware.jsonl', 1), ('ffridataset2020_cleanware.jsonl', 0))
    np.save('surf2', X)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, stratify=Y, random_state=0)

parameters = {
    'n_estimators' :[600, 900],
    'max_depth' :[90, 150, 200],
    'min_samples_leaf': [1],
    'min_samples_split': [2]
}

clf = GridSearchCV(estimator=RandomForestClassifier(), param_grid=parameters, cv=5, iid=False)
clf.fit(X_train, Y_train)

print("Best parameters set found on development set: %s" % clf.best_params_)

best = clf.best_estimator_
Y_pred = best.predict(X_test)
print(confusion_matrix(Y_test, Y_pred))
prob = best.predict_proba(X_test)[:, 1]
np.save('prob_surf', prob)
Y_pred = (prob > 0.6).astype(int)
print(confusion_matrix(Y_test, Y_pred))
Y_pred = (prob > 0.7).astype(int)
print(confusion_matrix(Y_test, Y_pred))
Y_pred = (prob > 0.8).astype(int)
print(confusion_matrix(Y_test, Y_pred))
Y_pred = (prob > 0.9).astype(int)
print(confusion_matrix(Y_test, Y_pred))
