import os
import pickle
import numpy as np
from extract import PEFeatureExtractor
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix
from importance import permutation_importance, low_fp_accuracy

ext = PEFeatureExtractor()
impf = np.load('impfuzzy.npy')

if os.path.isfile('./all.npy'):
    X = np.load('all.npy')
else:
    surf = np.load('surf.npy')
    X = np.hstack([surf, impf])
    np.save('all', X)

if X.shape[1] != ext.dim + impf.shape[1]:
    print('No')
    raise Exception('default data')

Y = np.hstack([np.ones(75000), np.zeros(75000)])
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, stratify=Y, random_state=0)

if os.path.isfile('./all.pickle'):
    with open('all.pickle', mode='rb') as fp:
        best = pickle.load(fp)
else:
    parameters = {
        'n_estimators' :[600, 700, 800],
        'max_depth' :[200, 300, 400],
        'min_samples_leaf': [1],
        'min_samples_split': [2]
    }

    clf = GridSearchCV(estimator=RandomForestClassifier(), param_grid=parameters, cv=5, iid=False)
    clf.fit(X_train, Y_train)

    print("Best parameters set found on development set: %s" % clf.best_params_)

    best = clf.best_estimator_

    with open('all.pickle', mode='wb') as fp:
        pickle.dump(best, fp)

Y_pred = best.predict(X_test)
print(confusion_matrix(Y_test, Y_pred))
prob = best.predict_proba(X_test)[:, 1]
Y_pred = (prob > 0.6).astype(int)
print(confusion_matrix(Y_test, Y_pred))
Y_pred = (prob > 0.7).astype(int)
print(confusion_matrix(Y_test, Y_pred))
Y_pred = (prob > 0.8).astype(int)
print(confusion_matrix(Y_test, Y_pred))
Y_pred = (prob > 0.9).astype(int)
print(confusion_matrix(Y_test, Y_pred))
print(low_fp_accuracy(Y_test, prob, fp_rate=0.01))
print(low_fp_accuracy(Y_test, prob))
