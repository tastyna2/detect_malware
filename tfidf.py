import json
import numpy as np
import pandas as pd
from gensim import corpora, models, matutils
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
from sklearn.tree import DecisionTreeClassifier as DT
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix

def load_str_info(*args):
    str_list = []
    l_array = np.empty(0)

    for fname, element in args:
	j = 1
	count = 0

	with open(fname) as f:
	    for line in f:
		if j > 1000:
		    break
		data = json.loads(line)
		str_list.append(data['strings'])
		j += 1
		count += 1

	l_array = np.hstack([l_array, np.full(count, element)])

    return str_list, l_array

strings, Y = load_str_info(('ffridataset2020_malware.jsonl', 1), ('ffridataset2020_cleanware.jsonl', 0))

dic = corpora.Dictionary(strings)
dic.filter_extremes(no_below = 1, no_above = 0.3)
bow_corpus = [dic.doc2bow(s) for s in strings]
tfidf_model = models.TfidfModel(bow_corpus)
tfidf_corpus = tfidf_model[bow_corpus]

X1 = matutils.corpus2dense(tfidf_corpus, num_terms = len(dic)).T

lsi_model = models.LsiModel(tfidf_corpus, id2word = dic, num_topics = 300)
lsi_corpus = lsi_model[tfidf_corpus]

X2 = matutils.corpus2dense(lsi_corpus, num_terms = 300).T

print(Y)
print(X1)
print(X2)
X1_train, X1_test, X2_train, X2_test, Y_train, Y_test = train_test_split(X1, X2, Y, test_size=0.3, stratify=Y, random_state=0)

model1 = SVC(gamma='scale')
model1.fit(X1_train, Y_train)
Y_pred1 = model1.predict(X1_test)

model2 = DT()
model2.fit(X1_train, Y_train)
Y_pred2 = model2.predict(X1_test)

model3 = SVC(gamma='scale')
model3.fit(X2_train, Y_train)
Y_pred3 = model3.predict(X2_test)

model4 = DT()
model4.fit(X2_train, Y_train)
Y_pred4 = model4.predict(X2_test)

sc = StandardScaler()
X_train_std = sc.fit_transform(X2_train)
X_test_std = sc.transform(X2_test)

lda = LDA(n_components=5)
X_train_lda = lda.fit_transform(X_train_std,Y_train)
X_test_lda = lda.transform(X_test_std)

model5 = SVC(gamma='scale')
model5.fit(X_train_lda, Y_train)
Y_pred5 = model5.predict(X_test_lda)

model6 = DT()
model6.fit(X_train_lda, Y_train)
Y_pred6 = model6.predict(X_test_lda)


print(confusion_matrix(Y_test, Y_pred1))
print(confusion_matrix(Y_test, Y_pred2))
print(confusion_matrix(Y_test, Y_pred3))
print(confusion_matrix(Y_test, Y_pred4))
print(confusion_matrix(Y_test, Y_pred5))
print(confusion_matrix(Y_test, Y_pred6))
