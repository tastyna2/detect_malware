import json
import os
import pickle
import numpy as np
from extract import PEFeatureExtractor
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix
from importance import permutation_importance, low_fp_accuracy

ext = PEFeatureExtractor()
impf = np.load('impfuzzy.npy')

if os.path.isfile('./all_rnd.npy'):
    X = np.load('all_rnd.npy')
else:
    surf = np.load('surf2.npy')
    rng = np.random.RandomState(113)
    rnd = 10000 * rng.rand(surf.shape[0], 1)
    X = np.hstack([surf, impf, rnd])
    np.save('all_rnd', X)

Y = np.hstack([np.ones(75000), np.zeros(75000)])

if not (os.path.isfile('./imptance_rnd.npy') and os.path.isfile('./valid_idx.npy')):
    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, stratify=Y, random_state=0)
    X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=15000, stratify=Y_train, random_state=0)

    if os.path.isfile('./imptance_rnd.pickle'):
        with open('imptance_rnd.pickle', mode='rb') as fp:
            best = pickle.load(fp)
    else:
        parameters = {
            'n_estimators' :[600, 700],
            'max_depth' :[200, 300],
            'min_samples_leaf': [1],
            'min_samples_split': [2]
        }

        clf = GridSearchCV(estimator=RandomForestClassifier(), param_grid=parameters, cv=5, iid=False)
        clf.fit(X_train, Y_train)

        print("Best parameters set found on development set: %s" % clf.best_params_)

        best = clf.best_estimator_

        with open('imptance_rnd.pickle', mode='wb') as fp:
            pickle.dump(best, fp)

    #cols = list(range(ext.dim))
    #cols.append(np.arange(ext.dim, X.shape[1]))
    cols = list(range(X.shape[1]))
    imptance = permutation_importance(best, X_val, Y_val, cols, n_repeats=10, random_state=0)

if not os.path.isfile('./result_impt_rnd.txt'):
    if os.path.isfile('./imptance_rnd.npy'):
        ar_impt = np.load('imptance_rnd.npy')
    else:
        idx_imptance = np.argsort(imptance.importances_mean)[::-1].reshape(-1, 1)
        sorted_imptance = np.sort(imptance.importances_mean)[::-1].reshape(-1, 1)
        ar_impt = np.hstack([idx_imptance, sorted_imptance])
        np.save('imptance_rnd', ar_impt)

    names = ext.name_strings()
    #names.append('impfuzzy')
    names.extend(['impfuzzy(' + str(i) +')' for i in range(1, impf.shape[1] + 1)])
    names.append('random')

    result = [names[int(idx)] + ' ' + str(impt) for idx, impt in ar_impt]
    result_str = '\n'.join(result)

    with open('result_impt_rnd.txt', mode='w') as fp:
        fp.write(result_str)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, stratify=Y, random_state=0)

if os.path.isfile('./valid_idx.npy'):
    valid_idx = np.load('valid_idx.npy')
else:
    rnd_impt = imptance.importances_mean[-1]
    valid_idx = np.where((imptance.importances_mean > rnd_impt) & (imptance.importances_mean > 0.0))[0]
    np.save('valid_idx', valid_idx)

if os.path.isfile('./valid_model.pickle'):
    with open('valid_model.pickle', mode='rb') as fp:
        best = pickle.load(fp)
else:
    X_train = X_train[:, valid_idx]
    parameters = {
        'n_estimators' :[300, 600, 700],
        'max_depth' :[100, 200, 300],
        'min_samples_leaf': [1],
        'min_samples_split': [2]
    }

    clf = GridSearchCV(estimator=RandomForestClassifier(), param_grid=parameters, cv=5, iid=False)
    clf.fit(X_train, Y_train)

    print("Best parameters set found on development set: %s" % clf.best_params_)

    best = clf.best_estimator_

    with open('valid_model.pickle', mode='wb') as fp:
        pickle.dump(best, fp)

X_test = X_test[:, valid_idx]
Y_pred = best.predict(X_test)
print(confusion_matrix(Y_test, Y_pred))
if os.path.isfile('./prob_valid.npy'):
    prob = np.load('prob_valid.npy')
else:
    prob = best.predict_proba(X_test)[:, 1]
    np.save('prob_valid', prob)
Y_pred = (prob > 0.6).astype(int)
print(confusion_matrix(Y_test, Y_pred))
Y_pred = (prob > 0.7).astype(int)
print(confusion_matrix(Y_test, Y_pred))
Y_pred = (prob > 0.8).astype(int)
print(confusion_matrix(Y_test, Y_pred))
Y_pred = (prob > 0.9).astype(int)
print(confusion_matrix(Y_test, Y_pred))
print(low_fp_accuracy(Y_test, prob, fp_rate=0.01))
print(low_fp_accuracy(Y_test, prob))
